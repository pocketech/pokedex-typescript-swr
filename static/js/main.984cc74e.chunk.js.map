{"version":3,"sources":["hooks/useRequest.ts","components/PokemonCard.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["baseUrl","useRequest","path","name","url","useSwr","data","error","PokemonCard","pokemon","className","id","src","sprites","front_default","alt","types","map","poke","type","join","App","results","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","value","fetcher","fetch","res","json","document","getElementById"],"mappings":"+LAEMA,G,MAAU,6BAEHC,EAAa,SAACC,EAAcC,GACvC,IAAMC,EAAMD,EAAOH,EAAUE,EAAO,IAAMC,EAAOH,EAAUE,EADF,EAEjCG,YAAOD,GAE/B,MAAO,CAAEE,KAJgD,EAEjDA,KAEOC,MAJ0C,EAE3CA,QCCHC,EAAc,SAAC,GAAoC,IACpDL,EADmD,EAAjCM,QAClBN,KADmD,EAEnCF,EAAW,WAAYE,GAAvCG,EAFmD,EAEnDA,KACR,OAH2D,EAE7CC,MACI,uDACbD,EAGD,sBAAKI,UAAU,2LAAf,UACI,uBAAMA,UAAU,+EAAhB,cAAiGJ,EAAKK,MACtG,qBACID,UAAU,oBACVE,IAAKN,EAAKO,QAAQC,cAClBC,IAAKZ,IAET,oBAAIO,UAAU,8CAAd,SAA6DP,IAC7D,sBAAMO,UAAU,uBAAhB,SACKJ,EAAKU,MAAMC,KAAI,SAACC,GAAD,OAAeA,EAAKC,KAAKhB,QAAMiB,KAAK,WAZ9C,6CCcPC,EAjBH,WAAO,IAAD,EACmDpB,EAAW,YAAtEK,EADQ,EACRA,KAER,OAHgB,EACFC,MAEI,uDACbD,EAGH,uBAAMI,UAAU,yCAAhB,UACE,oBAAIA,UAAU,oDAAd,qBACA,qBAAKA,UAAU,4DAAf,SACGJ,EAAKgB,QAAQL,KAAI,SAAAR,GAAO,OACvB,cAAC,EAAD,CAAgCA,QAASA,GAAvBA,EAAQN,cAPhB,6CCELoB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAWC,MAAO,CAAEC,QAAS,SAAChC,GAAD,OAAiBiC,MAAMjC,GAAKsB,MAAK,SAAAY,GAAG,OAAIA,EAAIC,YAAzE,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BlB,M","file":"static/js/main.984cc74e.chunk.js","sourcesContent":["import useSwr from 'swr'\n\nconst baseUrl = 'https://pokeapi.co/api/v2'\n\nexport const useRequest = (path: string, name?: string) => {\n  const url = name ? baseUrl + path + '/' + name : baseUrl + path\n  const { data, error } = useSwr(url)\n\n  return { data, error }\n}","import { useRequest } from '../hooks/useRequest'\n\ntype Poke = {\n    name: string\n    url: string\n}\n\nexport const PokemonCard = ({ pokemon }: { pokemon: Poke }) => {\n    const { name } = pokemon\n    const { data, error } = useRequest('/pokemon', name)\n    if (error) return <h1>Something went wrong!</h1>\n    if (!data) return <h1>Loading...</h1>\n\n    return (\n        <div className=\"relative w-48 p-4 overflow-hidden text-center text-yellow-300 duration-200 ease-in-out bg-white border-t-2 border-b-2 border-red-200 rounded-lg shadow-lg cursor-pointer hover:scale-105\">\n            <span className=\"absolute top-0 left-0 w-12 p-1 font-bold text-white bg-red-300 rounded-br-lg\">#{data.id}</span>\n            <img\n                className=\"block w-40 m-auto\"\n                src={data.sprites.front_default}\n                alt={name}\n            />\n            <h1 className=\"text-3xl font-bold text-gray-700 capitalize\">{name}</h1>\n            <span className=\"text-xl text-red-300\">\n                {data.types.map((poke: any) => poke.type.name).join(', ')}\n            </span>\n        </div>\n    )\n}","import { useRequest } from './hooks/useRequest'\nimport { PokemonCard } from './components/PokemonCard'\n\ntype Poke = {\n  name: string\n  url: string\n}\n\nconst App = () => {\n  const { data, error }: { data: { results: Poke[] }, error: any } = useRequest('/pokemon')\n\n  if (error) return <h1>Something went wrong!</h1>\n  if (!data) return <h1>Loading...</h1>\n\n  return (\n    <main className=\"max-w-6xl p-4 mx-auto my-8 text-center\">\n      <h1 className=\"mb-8 text-3xl text-center text-gray-600 uppercase\">Pokedex</h1>\n      <div className=\"grid items-center justify-center gap-6 grid-cols-fit-card\">\n        {data.results.map(pokemon =>\n          <PokemonCard key={pokemon.name} pokemon={pokemon} />\n        )}\n      </div>\n    </main>\n  )\n}\nexport default App","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { SWRConfig } from 'swr'\nimport './styles/main.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SWRConfig value={{ fetcher: (url: string) => fetch(url).then(res => res.json()) }}>\n      <App />\n    </SWRConfig>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}